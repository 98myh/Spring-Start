package org.zerock.ex7.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.access.expression.WebExpressionAuthorizationManager;

import java.util.ArrayList;
import java.util.List;

// Spring Security를 InMemory방식으로 처리 Test

// extends WebSecurityConfigurerAdapter을 상속받아서 진행되었던것이 springboot security 5.7.x 부터
// @EnableWebSecurity을 사용하고 SecurityFilterChain 관련한 @Bean으로 등록해서 사용

@Configuration
@EnableWebSecurity
@EnableMethodSecurity    // @EnableGlobalMethodSecurity는 소멸됨.
public class SecurityConfig {
	// 액세스를 허용하는 주소들을 등록
	private static final String[] AUTH_WHITELIST = {
			"", "/", "/accessDenied", "/sample/all", "/sample/login", "/sample/modify",
			"/notes/", "/notes/all", "/auth/login"
	};

	//암호화 시키기 위한 빈
	@Bean
	PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}


	// Security 설정하는 곳(*중요*)
	// Security 5.7.x 부터는 @Bean으로 등록해서 사용(리턴 타입은 SecurityFilterChain)
	@Bean
	protected SecurityFilterChain config(HttpSecurity httpSecurity) throws Exception {
		//httpSecurity의 http로 url을 요구될때 권한에따라 매칭
		httpSecurity.authorizeHttpRequests(auth -> {
			auth.requestMatchers(AUTH_WHITELIST).permitAll() // Security 없이 접근 가능하도록 등록
					.requestMatchers("/sample/admin/**").hasRole("ADMIN") //권한이 ADMIN이 있어야함
					.requestMatchers("/sample/member/**").access(new WebExpressionAuthorizationManager(
							"hasRole('ADMIN') or hasRole('MEMBER')")) //복수개의 권한을 등록할 때, 권한이 ADMIN과 MEMBER가 있어야함
					.anyRequest().denyAll(); //그외는 모두 접근 금지
		});

		// 아이디와 비밀번호로 로그인할 때 인증과 권한을 부여하는 곳
		httpSecurity.authenticationManager(
				authenticationManager(
						httpSecurity,
						(BCryptPasswordEncoder) passwordEncoder(),
						userDetailsService()
				)
		);
		//로그인할때 로그인 페이지를 지정
		httpSecurity.formLogin(httpSecurityFormLoginConfigurer -> {
			httpSecurityFormLoginConfigurer.loginProcessingUrl("/user/login");  //공식적인 로그인 페이지로 접근
		});
		return httpSecurity.build();
	}


	//authenticationManager의 역할 - 비밀번호 암호화, 인증과 권한을 부여하는 곳
	@Bean
	public AuthenticationManager authenticationManager(
			HttpSecurity httpSecurity, BCryptPasswordEncoder bCryptPasswordEncoder, UserDetailsService userDetailsService) throws Exception {
		//인증관리를 위한 객체를 선언
		AuthenticationManagerBuilder authenticationManagerBuilder = httpSecurity.getSharedObject(AuthenticationManagerBuilder.class);
		//인증관리를 위한 객체의 주요임무에 대한 설정 - 비밀번호 암호화, 인증과 권한 지정
		authenticationManagerBuilder
				.userDetailsService(userDetailsService)
				.passwordEncoder(bCryptPasswordEncoder);
		return authenticationManagerBuilder.build();
	}

	//사용자를 메모리에 기억하게 하여서 권한과 인증을 위한 객체를 만드는 곳
	@Bean
	public UserDetailsService userDetailsService() {
		UserDetails user1 = User.builder()
				.username("user1")
				.password(passwordEncoder().encode("1"))
				.roles("USER")
				.build();
		UserDetails member = User.builder()
				.username("member")
				.password(passwordEncoder().encode("1"))
				.roles("MEMBER")
				.build();
		UserDetails admin = User.builder()
				.username("admin")
				.password(passwordEncoder().encode("1"))
				.roles("ADMIN", "MEMBER")
				.build();
		List<UserDetails> list = new ArrayList<>();
		list.add(user1);
		list.add(member);
		list.add(admin);

		return new InMemoryUserDetailsManager(list);
	}

}