package org.zerock.ex7.config;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.CsrfConfigurer;
import org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer;
import org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer;
import org.springframework.security.config.annotation.web.configurers.LogoutConfigurer;
import org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.access.AccessDeniedHandler;
import org.springframework.security.web.access.expression.WebExpressionAuthorizationManager;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.security.web.authentication.logout.LogoutSuccessHandler;
import org.zerock.ex7.security.handler.CustomAccessDeniedHandler;
import org.zerock.ex7.security.handler.CustomLoginSuccessHandler;
import org.zerock.ex7.security.handler.CustomLogoutSuccessHandler;
import org.zerock.ex7.security.service.ClubUserDetailsService;

import java.io.IOException;

// Spring Security를 Database을 이용하여 처리한 코드
// extends WebSecurityConfigurerAdapter을 상속받아서 진행되었던것이 springboot security 5.7.x 부터
// @EnableWebSecurity을 사용하고 SecurityFilterChain 관련한 @Bean으로 등록해서 사용

@Configuration
@EnableWebSecurity
@EnableMethodSecurity    // @EnableGlobalMethodSecurity는 소멸됨.
public class SecurityConfig {

	@Autowired
	private ClubUserDetailsService clubUserDetailsService;

	// 액세스를 허용하는 주소들을 등록
	private static final String[] AUTH_WHITELIST = {
			"/", "/accessDenied", "/sample/all", "/sample/login", "/sample/modify",
			"/notes/", "/notes/all", "/auth/login", "/auth/logout","auth/accessDenied"
	};

	// 암호화시키기 위한 빈
	@Bean
	PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}

	// security 설정하는 곳, 5.7.x 부터는 @Bean으로 등록해서 사용(리턴 타입 SecurityFilterChain)
	@Bean
	protected SecurityFilterChain config(HttpSecurity httpSecurity) throws Exception {
		// httpSecurity의 http로 url을 요구할 때 권한을 매치하는 곳
		httpSecurity.authorizeHttpRequests(auth -> {
			auth.requestMatchers(AUTH_WHITELIST).permitAll() // 시큐리티 없이 접근 가능하도록 등록
					.requestMatchers("/sample/admin/**").hasRole("ADMIN")
					.requestMatchers("/sample/member/**").hasAnyRole("ADMIN","MEMBER")
					.anyRequest().denyAll(); // 그외는 모두 접근 금지
		});



		httpSecurity.formLogin(new Customizer<FormLoginConfigurer<HttpSecurity>>() {
			@Override
			public void customize(FormLoginConfigurer<HttpSecurity> httpSecurityFormLoginConfigurer) {
				httpSecurityFormLoginConfigurer
					.loginPage("/auth/login")
						.loginProcessingUrl("/login")
						.successHandler(customLoginSuccessHandler());
			}
		});

		httpSecurity.logout(new Customizer<LogoutConfigurer<HttpSecurity>>() {
			@Override
			public void customize(LogoutConfigurer<HttpSecurity> httpSecurityLogoutConfigurer) {
				httpSecurityLogoutConfigurer
						.logoutUrl("/auth/logout")
						.logoutSuccessUrl("/")
						.logoutSuccessHandler(customLogoutSuccessHandler())
						.invalidateHttpSession(true);
			}
		});

		// 서버에 인증정보를 저장하지 않기 때문에 csrf를 사용하지 않는다.
		httpSecurity.csrf(new Customizer<CsrfConfigurer<HttpSecurity>>() {
			@Override
			public void customize(CsrfConfigurer<HttpSecurity> httpSecurityCsrfConfigurer) {
				httpSecurityCsrfConfigurer.disable(); //disable하면 get으로 logout해도 처리가능, disable이 아니면 logout은 반드시 post방식으로 처리가 되어야함
			}
		});
		httpSecurity.exceptionHandling(new Customizer<ExceptionHandlingConfigurer<HttpSecurity>>() {
			@Override
			public void customize(ExceptionHandlingConfigurer<HttpSecurity> httpSecurityExceptionHandlingConfigurer) {
				httpSecurityExceptionHandlingConfigurer.accessDeniedPage("/auth/accessDenied")
						.accessDeniedHandler(customAccessDeniedHandler());
			}
		});
		return httpSecurity.build();
	}

	@Bean
	public CustomLoginSuccessHandler customLoginSuccessHandler() {
		return new CustomLoginSuccessHandler(passwordEncoder());
	}

	@Bean
	public LogoutSuccessHandler customLogoutSuccessHandler(){
		return new CustomLogoutSuccessHandler();
	}

	@Bean
	public AccessDeniedHandler customAccessDeniedHandler() {
		return new CustomAccessDeniedHandler();
	}


}